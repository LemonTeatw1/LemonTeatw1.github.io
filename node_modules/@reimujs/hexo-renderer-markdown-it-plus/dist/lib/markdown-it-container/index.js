"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const markdown_it_container_1 = __importDefault(require("markdown-it-container"));
function createContainer(klass, defaultTitle, md) {
    return [
        markdown_it_container_1.default,
        klass,
        {
            render(tokens, idx, _options, env) {
                const token = tokens[idx];
                const info = token.info.trim().slice(klass.length).trim();
                const attrs = md.renderer.renderAttrs(token);
                if (token.nesting === 1) {
                    const title = md.renderInline(info || defaultTitle, {
                        references: env.references,
                    });
                    if (klass === "details")
                        return `<details class="${klass} custom-block"${attrs}><summary>${title}</summary>\n`;
                    return `<div class="${klass} custom-block"${attrs}><p class="custom-block-title">${title}</p>\n`;
                }
                else
                    return klass === "details" ? `</details>\n` : `</div>\n`;
            },
        },
    ];
}
module.exports = (md, options, containerOptions) => {
    return md.use(...createContainer("tip", (containerOptions === null || containerOptions === void 0 ? void 0 : containerOptions.tipLabel) || "TIP", md))
        .use(...createContainer("info", (containerOptions === null || containerOptions === void 0 ? void 0 : containerOptions.infoLabel) || "INFO", md))
        .use(...createContainer("warning", (containerOptions === null || containerOptions === void 0 ? void 0 : containerOptions.warningLabel) || "WARNING", md))
        .use(...createContainer("danger", (containerOptions === null || containerOptions === void 0 ? void 0 : containerOptions.dangerLabel) || "DANGER", md))
        .use(...createContainer("details", (containerOptions === null || containerOptions === void 0 ? void 0 : containerOptions.detailsLabel) || "Details", md));
};
