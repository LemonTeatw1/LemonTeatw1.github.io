"use strict";
/**
 * @Author: CHC
 * @Maintainer: D-Sketon
 * @Date:   2017-07-24T14:15:39+08:00
 * @Email:  chenhuachaoxyz@gmail.com
 * @Filename: renderer.js
 * @Last modified by:   CHC
 * @Last modified time: 2024-12-14T16:35:35+08:00
 * @License: MIT
 * @Copyright: 2017
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const markdown_it_1 = __importDefault(require("markdown-it"));
const defPugsList = [
    "markdown-it-container",
    "markdown-it-emoji",
    "markdown-it-sub",
    "markdown-it-sup",
    "markdown-it-deflist",
    "markdown-it-abbr",
    "markdown-it-footnote",
    "markdown-it-ins",
    "markdown-it-mark",
    "@vscode/markdown-it-katex",
    "markdown-it-toc-and-anchor",
];
/**
 * General Default markdown-it config.
 */
function checkValue(config, res, key, trueVal, falseVal) {
    res[key] =
        config[key] === true || config[key] === undefined || config[key] === null
            ? trueVal
            : falseVal;
}
/**
 * markdown-it default config
 */
function checkConfig(config) {
    const res = {};
    checkValue(config, res, "html", true, false);
    checkValue(config, res, "xhtmlOut", true, false);
    checkValue(config, res, "breaks", true, false);
    checkValue(config, res, "linkify", true, false);
    checkValue(config, res, "typographer", true, false);
    res["rawLaTeX"] = config["rawLaTeX"] || false;
    res["langPrefix"] = config["langPrefix"] || "";
    res["quotes"] = config["quotes"] || "“”‘’";
    return res;
}
/**
 * General default plugin config
 */
function checkPlugins(pugs, config) {
    const defPugsObj = {};
    for (const pug of defPugsList) {
        defPugsObj[pug] = { name: pug, enable: true };
    }
    const result = [];
    for (const pug of pugs) {
        if (!(pug instanceof Object) || !(pug.plugin instanceof Object))
            continue;
        const pugName = pug.plugin.name;
        if (!pugName)
            continue;
        pug.plugin.enable =
            pug.plugin.enable == null || pug.plugin.enable !== true
                ? false
                : pug.plugin.enable;
        if (defPugsObj[pugName]) {
            defPugsObj[pugName] = pug.plugin;
        }
        else {
            result.push(pug.plugin);
        }
    }
    for (let i = defPugsList.length - 1; i >= 0; i--) {
        result.unshift(defPugsObj[defPugsList[i]]);
    }
    if (config.rawLaTeX) {
        // set markdown-it-katex to false
        for (let i = 0; i < result.length; i++) {
            if (result[i].name === "@vscode/markdown-it-katex") {
                result[i].enable = false;
                break;
            }
        }
    }
    return result;
}
module.exports = function (data) {
    var _a;
    const config = ((_a = this.config) === null || _a === void 0 ? void 0 : _a.markdown_it_plus) || {};
    const parseConfig = checkConfig(config);
    let md = (0, markdown_it_1.default)(parseConfig);
    config.plugins = config.plugins || [];
    const plugins = checkPlugins(config.plugins, config);
    md = plugins.reduce((mdInstance, pug) => {
        if (pug.enable) {
            if (pug.name === "markdown-it-container") {
                const container = require("./markdown-it-container");
                return md.use(container);
            }
            else {
                let plugin = require(pug.name);
                if (pug.name === "markdown-it-toc-and-anchor") {
                    pug.options = pug.options || {};
                    if (!pug.options.anchorLinkSymbol)
                        pug.options.anchorLinkSymbol = "";
                    if (!pug.options.tocFirstLevel)
                        pug.options.tocFirstLevel = 2;
                }
                if (typeof plugin !== "function" &&
                    typeof plugin.default === "function") {
                    plugin = plugin.default;
                }
                return pug.options
                    ? mdInstance.use(plugin, pug.options)
                    : mdInstance.use(plugin);
            }
        }
        return mdInstance;
    }, md);
    if (config.rawLaTeX) {
        md.use(require("./markdown-it-raw-latex/index.js"));
    }
    return md.render(data.text);
};
